#!/usr/bin/env bash
spaces (){
	WORKSPACE_WINDOWS=$(hyprctl workspaces -j | jq 'map({key: .id | tostring, value: .windows}) | from_entries')
	seq 1 $(eww get number_of_workspaces) | jq --argjson windows "${WORKSPACE_WINDOWS}" --slurp -Mc 'map(tostring) | map({id: ., windows: ($windows[.]//0)})'
}

function get {
    spaces
    socat -u UNIX-CONNECT:/tmp/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock - | while read -r line; do
    	spaces
    done
}

function active {
    hyprctl monitors -j | jq --raw-output .[0].activeWorkspace.id
    socat -u UNIX-CONNECT:/tmp/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock - | stdbuf -o0 grep '^workspace>>' | stdbuf -o0 awk -F '>>|,' '{print $2}'
}

dock_should_show() {
    WSPACES=$(spaces)
    ACTIVE=$(
    hyprctl monitors -j | jq --raw-output .[0].activeWorkspace.id)
    let "i = $ACTIVE - 1"
    WINDOWS=$(echo $WSPACES | jq --raw-output .[$i].windows)
    if [[ $WINDOWS -gt 0 ]]; then
        echo 'false'
    else
        echo 'true'
    fi
}

function monitor_dock {
    dock_should_show
    socat -u UNIX-CONNECT:/tmp/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock - | while read -r line; do
    	dock_should_show
    done
}

function update_dock {
    eww update dock_reveal=$(dock_should_show)
}

if [[ $1 == 'get' ]]; then get; fi
if [[ $1 == 'active' ]]; then active; fi
if [[ $1 == 'monitor-dock' ]]; then monitor_dock; fi
if [[ $1 == 'update-dock' ]]; then update_dock; fi